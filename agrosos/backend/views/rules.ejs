<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Existing Rules</title>
    <link rel="stylesheet" href="/css/existing-rules-component.css">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
</head>
<body class="<%= darkMode ? 'dark-mode' : '' %>">
    <div id="existing-rules-container">
        <button class="existing-rule-back-button" onclick="window.location.href='/settings'">
            <i class="fas fa-arrow-left"></i>
        </button>
        <div class="existing-rule-header">
            <h1 class="existing-rule-title">
                <i class="fas fa-clipboard-list icon-list" aria-hidden="true"></i>
                Reglas
            </h1>
        </div>

        <div class="existing-rule-cards-container" role="region" aria-live="polite">
            <% if (rules.length === 0) { %>
                <div class="no-rules-message">
                    <h2>Añadir regla</h2>
                    <button class="add-rule-button" onclick="window.location.href='/add-rule'" aria-label="Añadir una nueva regla">
                        <i class="fas fa-plus" aria-hidden="true"></i>
                    </button>
                </div>
            <% } else { %>
                <% rules.forEach(rule => { %>
                    <div class="existing-rule-card" tabindex="0" role="article" aria-labelledby="rule-<%= rule.id %>">
                        <div class="existing-rule-card-info">
                            <p><strong>Nombre:</strong> <%= rule.name %></p>
                            <p><strong>Cultivo:</strong> <%= rule.crop %></p>
                            <p><strong>Condiciones:</strong> <%= formatRuleInfo(rule.rule_info) %></p>
                        </div>

                        <div class="existing-rule-card-actions">
                            <button class="existing-rule-edit-button" onclick="window.location.href='/edit-rule/<%= rule.id %>'" aria-label="Editar regla <%= rule.name %>">
                                <i class="fas fa-edit" aria-hidden="true"></i>
                            </button>
                            <button class="existing-rule-delete-button" onclick="openModal(<%= rule.id %>)" aria-label="Eliminar regla <%= rule.name %>">
                                <i class="fas fa-trash-alt" aria-hidden="true"></i>
                            </button>
                        </div>
                    </div>
                <% }) %>
            <% } %>
        </div>

        <% if (rules.length > 0) { %>
            <button class="add-rule-button-circle" onclick="window.location.href='/add-rule'" aria-label="Añadir una nueva regla">
                <i class="fas fa-plus" aria-hidden="true"></i>
            </button>
        <% } %>

        <% if (isModalOpen) { %>
            <div class="existing-rule-modal-overlay" onclick="closeModal()">
                <div class="existing-rule-modal-content" onclick="event.stopPropagation()">
                    <h2>¿Estás seguro de que deseas eliminar esta regla?</h2>
                    <div class="existing-rule-modal-buttons">
                        <button class="existing-rule-modal-button existing-rule-modal-confirm" onclick="handleDelete()">
                            Aceptar
                        </button>
                        <button class="existing-rule-modal-button existing-rule-modal-cancel" onclick="closeModal()" aria-label="Cancelar eliminación de la regla">
                            Cancelar
                        </button>
                    </div>
                </div>
            </div>
        <% } %>
    </div>

    <script>
        let isModalOpen = false;
        let ruleToDelete = null;

        function openModal(ruleId) {
            ruleToDelete = ruleId;
            isModalOpen = true;
            renderModal();
        }

        function closeModal() {
            isModalOpen = false;
            ruleToDelete = null;
            renderModal();
        }

        function handleDelete() {
            if (!ruleToDelete) return;

            fetch(`/rules/${ruleToDelete}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
                },
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Error al eliminar la regla');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Regla eliminada con éxito:', data);
                    window.location.reload(); // Recargar para actualizar la lista de reglas
                })
                .catch(error => {
                    console.error(error);
                    alert('Hubo un problema al eliminar la regla. Intenta nuevamente.');
                });

            closeModal();
        }

        function renderModal() {
            const modalOverlay = document.querySelector('.existing-rule-modal-overlay');
            if (modalOverlay) {
                modalOverlay.style.display = isModalOpen ? 'flex' : 'none';
            }
        }

        function formatRuleInfo(info) {
            if (!info) return 'Información no válida';

            try {
                const parsedInfo = JSON.parse(info);
                let formattedInfo = '';

                if (parsedInfo.AND && Array.isArray(parsedInfo.AND)) {
                    parsedInfo.AND.forEach(conditionGroup => {
                        if (conditionGroup.conditions) {
                            conditionGroup.conditions.forEach(condition => {
                                formattedInfo += `${condition.type} ${condition.operator} ${condition.value}, `;
                            });
                        }

                        if (conditionGroup.actions) {
                            conditionGroup.actions.forEach(action => {
                                formattedInfo += `Acción: ${action}, `;
                            });
                        }

                        if (conditionGroup.sensors) {
                            conditionGroup.sensors.forEach(sensor => {
                                formattedInfo += `Sensor: ${sensor.type}, `;
                            });
                        }
                    });
                }

                return formattedInfo.slice(0, -2); // Eliminar la última coma y espacio
            } catch (error) {
                console.error('Error al parsear la información de la regla:', error);
                return 'Información no válida';
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            renderModal();
        });
    </script>
</body>
</html>
