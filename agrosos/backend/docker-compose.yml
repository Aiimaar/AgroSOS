services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      db:  # Depende del servicio 'db'
        condition: service_healthy  # ... pero solo después de que 'db' sea saludable
    environment:
      NODE_ENV: development
      DB_HOST: db  # Usar 'db' como host.  Es mejor usar el nombre del servicio, no 127.0.0.1
      MYSQL_DATABASE: ${MYSQL_DATABASE_DEV}
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_PASSWORD_DEV}  # Debe coincidir con la contraseña en tu db.js
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_DEV} # No se usa directamente por backend, pero es buena práctica mantenerla
      SESSION_SECRET: ${SESSION_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    volumes:
      - ./:/app
      - /app/node_modules  # Volumen anónimo para node_modules
    restart: always

  db:
    image: mysql:8.0
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE_DEV}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD_DEV}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:  # ¡Importante!  Define la prueba de salud
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD_DEV}"]
      interval: 5s  # Cada 5 segundos
      timeout: 5s   # Espera hasta 5 segundos por respuesta
      retries: 10   # Intenta 10 veces antes de fallar

volumes:
  mysql_data:  # Define el volumen persistente para los datos de MySQL